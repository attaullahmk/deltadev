In React, props (short for "properties") are used to pass data from a parent component to a child component. They enable you to make components dynamic and reusable by allowing different data to be passed in.

Key Features of Props:
Immutable: Props are read-only, meaning they cannot be modified by the child component that receives them.
Data Flow: Props follow a unidirectional data flow (from parent to child).
JavaScript Object: Props are passed as an object containing key-value pairs.

How Props Work:
Define Props in the Parent Component: When using a child component, you pass data to it using attributes.
Access Props in the Child Component: The child component receives these attributes as a props object.

Props are useful when:
You need to pass data from a parent to a child component.
You want components to behave differently based on the data they receive.

Example: Using Props
Parent Component

import React from 'react';
import Greeting from './Greeting';

function App() {
  return (
    <div>
      <Greeting name="Atta" age={25} />
    </div>
  );
}

export default App;


Child Component
import React from 'react';

function Greeting(props) {
  return (
    <div>
      <h1>Hello, {props.name}!</h1>
      <p>You are {props.age} years old.</p>
    </div>
  );
}

export default Greeting;


Output:
Hello, Atta!
You are 25 years old.



Destructuring Props (Alternative Syntax)
You can destructure props for cleaner code:

function Greeting({ name, age }) {
  return (
    <div>
      <h1>Hello, {name}!</h1>
      <p>You are {age} years old.</p>
    </div>
  );
}



extra point must be read in detail 
In React (and programming in general), a fallback refers to a default value, UI, or behavior that is used when the desired value or result is unavailable, fails, or is not provided. It ensures the application remains functional and provides a better user experience.
//Common Scenarios for Fallback in React ?


